package com.contract.management.system.controller;import com.contract.management.system.model.collateral.dto.CollateralDto;import com.contract.management.system.service.collateral.CollateralService;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.test.web.servlet.MockMvc;import java.util.ArrayList;import java.util.List;import static org.mockito.BDDMockito.given;import static org.mockito.BDDMockito.willDoNothing;import static org.mockito.Mockito.verify;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@WebMvcTest(CollateralController.class)public class CollateralControllerTest{    @SuppressWarnings("SpringJavaInjectionPointsAutowiringInspection")    @Autowired    private MockMvc mockMvc;    @MockBean    CollateralService collateralService;    @Test    @DisplayName("COLLATERAL-GET")    public void getCollateral() throws Exception    {        int id = 1;        given(collateralService.findById(id)).willReturn(                new CollateralDto(                        1,                        "INJURY_PAY",                        "상해치료비",                        1000000,                        100,                        1,                        "TRAVELER",                        "여행자 보험")        );        mockMvc.perform(get("/collateral?id="+id))                .andExpect(status().isOk())                .andExpect(jsonPath("$.collateralId").exists())                .andExpect(jsonPath("$.code").exists())                .andExpect(jsonPath("$.name").exists())                .andExpect(jsonPath("$.insurableMoney").exists())                .andExpect(jsonPath("$.standardMoney").exists())                .andExpect(jsonPath("$.productId").exists())                .andExpect(jsonPath("$.productCode").exists())                .andExpect(jsonPath("$.productName").exists())                .andDo(print());        verify(collateralService).findById(id);    }    @Test    @DisplayName("COLLATERAL-PUT")    public void putCollateral() throws Exception    {        CollateralDto dto = new CollateralDto(                1,                "INJURY_PAY",                "상해치료비",                1000000,                100,                1,                "TRAVELER",                "여행자 보험"        );        given(collateralService.save(dto)).willReturn(                new CollateralDto(                        1,                        "INJURY_PAY",                        "상해치료비",                        1000000,                        100,                        1,                        null,                        null)        );        mockMvc.perform(put("/collateral"))                .andExpect(status().isOk())                .andExpect(jsonPath("$.collateralId").exists())                .andExpect(jsonPath("$.code").exists())                .andExpect(jsonPath("$.name").exists())                .andExpect(jsonPath("$.insurableMoney").exists())                .andExpect(jsonPath("$.standardMoney").exists())                .andExpect(jsonPath("$.productId").exists())                .andExpect(jsonPath("$.productCode").exists())                .andExpect(jsonPath("$.productName").exists())                .andDo(print());        verify(collateralService).save(dto);    }    @Test    @DisplayName("COLLATERAL-POST")    public void postCollateral() throws Exception    {        CollateralDto dto = new CollateralDto(                1,                "INJURY_PAY",                "상해치료비",                1000000,                5000,                1,                "TRAVELER",                "여행자 보험"        );        given(collateralService.save(dto)).willReturn(                new CollateralDto(                        1,                        "INJURY_PAY",                        "상해치료비",                        1000000,                        5000,                        1,                        "TRAVELER",                        "여행자 보험"                        )        );        mockMvc.perform(put("/collateral"))                .andExpect(status().isOk())                .andExpect(jsonPath("$.collateralId").exists())                .andExpect(jsonPath("$.code").exists())                .andExpect(jsonPath("$.name").exists())                .andExpect(jsonPath("$.insurableMoney").exists())                .andExpect(jsonPath("$.standardMoney").exists())                .andExpect(jsonPath("$.productId").exists())                .andExpect(jsonPath("$.productCode").exists())                .andExpect(jsonPath("$.productName").exists())                .andDo(print());        verify(collateralService).save(dto);    }    @Test    @DisplayName("COLLATERAL-DELETE")    public void deleteCollateral() throws Exception    {        int id = 1;        willDoNothing().given(collateralService).deleteById(id);        mockMvc.perform(delete("/collateral?id="+id))                .andExpect(status().isOk())                .andDo(print());        verify(collateralService).deleteById(id);    }    @Test    @DisplayName("COLLATERAL-getALL")    public void getCollaterals() throws Exception    {        List<CollateralDto> dtos = new ArrayList<>();        dtos.add(new CollateralDto(                1,                "INJURY_PAY",                "상해치료비",                1000000,                100,                1,                "TRAVELER",                "여행자 보험")        );        given(collateralService.findAll()).willReturn(dtos);        mockMvc.perform(get("/collaterals"))                .andExpect(status().isOk())                .andDo(print());        verify(collateralService).findAll();    }}